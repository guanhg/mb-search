/* The following code was generated by JFlex 1.4.3 on 10/20/11 1:25 PM */

package org.musicbrainz.search.analysis;

/**
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.apache.lucene.analysis.Token;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/20/11 1:25 PM from the specification file
 * <tt>/Users/paul/Code/MusicbrainzSearchServer/index/src/main/java/org/musicbrainz/search/analysis/MusicbrainzTokenizerImpl.jflex</tt>
 */
class MusicbrainzTokenizerImpl {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\11\1\0\1\12\1\10\22\0\1\12\6\0\1\3"+
    "\4\0\1\5\1\5\1\4\1\5\12\2\7\0\32\6\4\0\1\5"+
    "\1\0\32\6\57\0\1\6\12\0\1\6\4\0\1\6\5\0\27\6"+
    "\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0\5\6"+
    "\11\0\1\6\213\0\1\6\13\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\24\6\1\0\54\6\1\0\46\6\1\0\5\6\4\0\202\6"+
    "\10\0\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6"+
    "\2\0\1\6\7\0\47\6\110\0\33\6\5\0\3\6\56\0\32\6"+
    "\5\0\13\6\25\0\12\2\4\0\2\6\1\0\143\6\1\0\1\6"+
    "\17\0\2\6\7\0\2\6\12\2\3\6\2\0\1\6\20\0\1\6"+
    "\1\0\36\6\35\0\3\6\60\0\46\6\13\0\1\6\u0152\0\66\6"+
    "\3\0\1\6\22\0\1\6\7\0\12\6\4\0\12\2\25\0\10\6"+
    "\2\0\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6"+
    "\3\0\1\6\36\0\2\6\1\0\3\6\4\0\12\2\2\6\23\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\37\0\4\6\1\0\1\6\7\0\12\2\2\0"+
    "\3\6\20\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\22\0\1\6\17\0\2\6\4\0"+
    "\12\2\25\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\3\0\1\6\36\0\2\6\1\0\3\6\4\0"+
    "\12\2\1\0\1\6\21\0\1\6\1\0\6\6\3\0\3\6\1\0"+
    "\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\3\6\3\0\10\6\1\0\3\6\55\0\11\2\25\0\10\6\1\0"+
    "\3\6\1\0\27\6\1\0\12\6\1\0\5\6\46\0\2\6\4\0"+
    "\12\2\25\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\40\0\1\6\1\0\2\6\4\0\12\2\25\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\20\6\46\0\2\6\4\0"+
    "\12\2\25\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0"+
    "\7\6\71\0\1\1\60\6\1\1\2\6\14\1\7\6\11\1\12\2"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\0\2\6\11\0\1\6\2\0\5\6"+
    "\1\0\1\6\11\0\12\2\2\0\2\6\42\0\1\6\37\0\12\2"+
    "\26\0\10\6\1\0\42\6\35\0\4\6\164\0\42\6\1\0\5\6"+
    "\1\0\2\6\25\0\12\2\6\0\6\6\112\0\46\6\12\0\51\6"+
    "\7\0\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6"+
    "\1\0\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6"+
    "\2\0\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6"+
    "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6"+
    "\1\0\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6"+
    "\2\0\7\6\1\0\47\6\1\0\23\6\16\0\11\2\56\0\125\6"+
    "\14\0\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\25\0\15\6"+
    "\1\0\4\6\16\0\22\6\16\0\22\6\16\0\15\6\1\0\3\6"+
    "\17\0\64\6\43\0\1\6\4\0\1\6\3\0\12\2\46\0\12\2"+
    "\6\0\130\6\10\0\51\6\127\0\35\6\51\0\12\2\36\6\2\0"+
    "\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6\6\0\26\6\2\0"+
    "\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6\1\0"+
    "\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6\4\0"+
    "\15\6\5\0\3\6\1\0\7\6\164\0\1\6\15\0\1\6\202\0"+
    "\1\6\4\0\1\6\2\0\12\6\1\0\1\6\3\0\5\6\6\0"+
    "\1\6\1\0\1\6\1\0\1\6\1\0\4\6\1\0\3\6\1\0"+
    "\7\6\3\0\3\6\5\0\5\6\u0ebb\0\2\6\52\0\5\6\5\0"+
    "\2\6\4\0\126\6\6\0\3\6\1\0\132\6\1\0\4\6\5\7"+
    "\50\7\3\7\1\0\136\6\21\0\30\6\70\0\20\6\u0100\0\200\7"+
    "\200\0\u19b6\7\12\7\100\0\u51a6\7\132\7\u048d\6\u0773\0\u2ba4\6\u215c\0"+
    "\u012e\7\2\7\73\7\225\7\7\6\14\0\5\6\5\0\1\6\1\0"+
    "\12\6\1\0\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0"+
    "\2\6\1\0\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0"+
    "\14\6\164\0\5\6\1\0\207\6\23\0\12\2\7\0\32\6\6\0"+
    "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\2\1\3\2\4\7\5\1\2\3\6"+
    "\1\7\3\6\3\7\1\10\1\11\3\5\2\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[33];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\13\0\26\0\41\0\54\0\67\0\102\0\67"+
    "\0\115\0\130\0\143\0\156\0\171\0\204\0\217\0\232"+
    "\0\245\0\260\0\273\0\306\0\321\0\334\0\347\0\362"+
    "\0\375\0\u0108\0\u0113\0\u011e\0\u0129\0\u0134\0\u013f\0\u014a"+
    "\0\u0155";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[33];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\3\2\1\5\1\6\1\7\2\10"+
    "\1\2\2\11\3\2\1\11\4\0\1\11\2\3\1\11"+
    "\1\12\1\13\1\3\4\0\1\11\1\3\1\4\1\11"+
    "\1\14\1\15\1\4\4\0\1\11\1\3\1\4\1\16"+
    "\1\17\1\13\1\20\30\0\1\10\1\0\7\11\4\0"+
    "\1\11\1\21\1\22\3\11\1\23\4\0\2\11\1\24"+
    "\3\11\1\13\4\0\1\11\1\25\1\26\3\11\1\27"+
    "\4\0\1\11\1\30\1\31\3\11\1\32\4\0\6\11"+
    "\1\33\4\0\1\11\1\21\1\22\3\11\1\34\4\0"+
    "\1\11\1\3\1\4\1\16\1\12\1\13\1\20\4\0"+
    "\1\11\2\21\1\11\1\35\1\11\1\21\4\0\1\11"+
    "\1\21\1\22\1\11\1\36\1\37\1\22\4\0\1\11"+
    "\1\21\1\22\1\11\1\35\1\11\1\23\4\0\2\11"+
    "\1\24\1\11\2\37\1\24\4\0\1\11\2\25\1\11"+
    "\1\12\1\13\1\25\4\0\1\11\1\25\1\26\1\11"+
    "\1\14\1\15\1\26\4\0\1\11\1\25\1\26\1\11"+
    "\1\12\1\13\1\27\4\0\1\11\2\30\1\11\2\13"+
    "\1\30\4\0\1\11\1\30\1\31\1\11\2\15\1\31"+
    "\4\0\1\11\1\30\1\31\1\11\2\13\1\32\4\0"+
    "\3\11\1\16\2\11\1\33\4\0\1\11\1\21\1\22"+
    "\1\11\1\40\1\11\1\23\4\0\1\11\2\21\3\11"+
    "\1\21\4\0\1\11\2\25\3\11\1\25\4\0\1\11"+
    "\2\30\3\11\1\30\4\0\1\11\2\21\3\11\1\41"+
    "\4\0\1\11\2\21\1\11\1\40\1\11\1\21\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\4\1\1\11\1\1\1\11\31\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[33];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

public static final int ALPHANUM                          = MusicbrainzTokenizer.ALPHANUM;
public static final int APOSTROPHE                        = MusicbrainzTokenizer.APOSTROPHE;
public static final int ACRONYM                           = MusicbrainzTokenizer.ACRONYM;
public static final int CONTROLANDPUNCTUATION             = MusicbrainzTokenizer.CONTROLANDPUNCTUATION;
public static final int ALPHANUMANDPUNCTUATION            = MusicbrainzTokenizer.ALPHANUMANDPUNCTUATION;
public static final int HOST                              = MusicbrainzTokenizer.HOST;
public static final int NUM                               = MusicbrainzTokenizer.NUM;
public static final int CJ                                = MusicbrainzTokenizer.CJ;

public static final String [] TOKEN_TYPES = MusicbrainzTokenizer.TOKEN_TYPES;

public final int yychar()
{
    return yychar;
}

/**
 * Fills Lucene token with the current token text.
 */
final void getText(Token t) {
  t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}

/**
 * Fills TermAttribute with the current token text.
 */
final void getText(CharTermAttribute t) {
  t.copyBuffer(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  MusicbrainzTokenizerImpl(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  MusicbrainzTokenizerImpl(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int getNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { return HOST;
          }
        case 10: break;
        case 9: 
          { return ACRONYM;
          }
        case 11: break;
        case 4: 
          { /* ignore */
          }
        case 12: break;
        case 7: 
          { return NUM;
          }
        case 13: break;
        case 3: 
          { return CJ;
          }
        case 14: break;
        case 2: 
          { return ALPHANUM;
          }
        case 15: break;
        case 8: 
          { return APOSTROPHE;
          }
        case 16: break;
        case 1: 
          { return CONTROLANDPUNCTUATION;
          }
        case 17: break;
        case 5: 
          { return ALPHANUMANDPUNCTUATION;
          }
        case 18: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
